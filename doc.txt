gcloud compute disks describe {{ disk_name }}
        --zone {{ zone }}
--> check if the disk exists (result.rc != 0)

gcloud compute instances create vm2 \
        --zone europe-west1-c \
        --machine-type n1-standard-1 \
        --network-interface subnet=default \
        --network-interface subnet=sub30

gcloud compute instances describe vm1 \
        --zone europe-west1-c \
        --format="value(status)"
--> stdout.find('RUNNING') == -1 to check if vm is not running ("stdout": "RUNNING")

gcloud compute instances describe vm2 \
        --zone=europe-west1-c \
        --format="value(networkInterfaces[0].accessConfigs[0].natIP)"

gcloud compute disks list

gcloud compute routes create openvpnnet \
    --destination-range=172.16.252.0/24 \
    --network=reginavpc1 \
    --next-hop-instance=vpnserver


on macbook:
sudo route add -net 10.10.10.0 -netmask 255.255.255.0 -interface utun3
#sudo networksetup -setadditionalroutes utun3 10.10.10.0 255.255.255.0 172.16.252.1
The following command will show the existing routing table (IPv4 only):
netstat -nr -f inet
On EVE NG server:
ip address add 192.168.255.1/24 dev pnet9
echo 1 > /proc/sys/net/ipv4/ip_forward
To generate SSH keys in macOS:
ssh-keygen -t rsa
save this key to the clipboard
pbcopy < ~/.ssh/id_rsa.pub

on vpnserver:
sudo apt-get install nano
sudo nano /etc/sysctl.conf
net.ipv4.ip_forward=1
To update session settings, run:
sudo sysctl -p
sudo systemctl status openvpn@server

sudo apt-get update
sudo apt-get install iputils-ping

duck dns automatic IP address update:
https://www.duckdns.org/update?domains=vpngc&token=8c892437-f280-410c-a7f4-99d8a453a372&ip=

Ansible:
result.rc == 0 or != 0 (return code of the task result)
changed_when: (Overriding The Changed Result)

For example, you could manage your keys using the OS Login feature. To use OS Login:

- Enable OS Login on the instance generated by setting "enable-oslogin" metadata field to "TRUE" via the metadata parameter on GCE instance creation with Ansible.
- Make an IAM user with the roles/iam.serviceAccountUser and roles/compute.osLoginAdmin permissions.
- Either generate a new or choose an existing SSH keypair and upload the public key for use with OS Login: gcloud compute os-login ssh-keys add --key-file [KEY_FILE_PATH] --ttl [EXPIRE_TIME] (where --ttl specifies how long you want this public key to be usable - for example, --ttl 1d will make it expire after 1 day)
- From here, you should be able to configure Ansible to use the service user's name and corresponding private key to the uploaded public key in order to SSH successfully into any OS Login-enabled GCE instances. For example, this can be done by overriding the ansible_user and ansible_ssh_private_key_file inventory parameters, or by passing --private-key and --user parameters to ansible-playbook.
